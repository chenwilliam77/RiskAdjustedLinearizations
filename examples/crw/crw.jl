using UnPack, OrderedCollections, LinearAlgebra, JLD2, SparseArrays

# Load guesses
sssout = JLD2.jldopen(joinpath(dirname(@__FILE__), "..", "..", "test", "reference", "crw_sss.jld2"), "r")

zguess = vec(sssout["z_rss"])
yguess = vec(sssout["y_rss"])
Psiguess = sssout["Psi_rss"]

mutable struct CoeurdacierReyWinant{T <: Real}
    œÉr::T # SD of interest rate shocks
    œÉy::T # SD of endowment shocks
    Œ≤::T  # intertemporal discount rate
    Œ≥::T  # risk aversion coefficient
    Œ∏::T
    œÅr::T # persistence of interest rate
    œÅy::T # persistence of endowment
    rr::T # long-run interest rate
    yy::T # long-run endowment
end

function CoeurdacierReyWinant(; œÉr::T = .025, œÉy::T = .025, Œ≤::T = .96, Œ≥::T = 2.,
                              Œ∏::T = 1., œÅr::T = .9, œÅy::T = .9, rr::T = .01996, yy::T = log(Œ∏)) where {T <: Real}
    return CoeurdacierReyWinant{T}(œÉr, œÉy, Œ≤, Œ≥, Œ∏, œÅr, œÅy, rr, yy)
end

function crw(m::CoeurdacierReyWinant{T}; Œ® = nothing, sparse_jacobian::Vector{Symbol} = Symbol[],
             sparse_arrays::Bool = false) where {T <: Real}
    @unpack œÉr, œÉy, Œ≤, Œ≥, Œ∏, œÅr, œÅy, rr, yy = m

    # N‚Çú = exp(r‚Çú) * A‚Çú‚Çã‚ÇÅ + Y‚Çú, where A‚Çú is foreign assets and Y‚Çú is the endowment
    # The jump variables are consumption, expected return on assets X‚Çú = ùîº‚Çú[R‚Çú‚Çä‚ÇÅ], and
    # W‚Çú = ùîº‚Çú[Y‚Çú‚Çä‚ÇÅ]
    S  = OrderedDict{Symbol, Int}(:N => 1, :r => 2, :y => 3) # State variables
    J  = OrderedDict{Symbol, Int}(:c => 1, :x => 2, :w => 3) # Jump variables
    SH = OrderedDict{Symbol, Int}(:Œµr => 1, :Œµy => 2)        # Exogenous shocks
    Nz = length(S)
    Ny = length(J)
    NŒµ = length(SH)

    function Œº(F, z, y) # note that y here refers to jump variables
        F[S[:N]] = exp(y[J[:w]]) + exp(y[J[:x]]) * (z[S[:N]] - exp(y[J[:c]]))
        F[S[:r]] = (1 - œÅr) * rr + œÅr * z[S[:r]]
        F[S[:y]] = (1 - œÅy) * yy + œÅy * z[S[:y]]
    end

    function Œæ(F, z, y)
        F[J[:c]] = log(Œ≤) + Œ≥ * y[J[:c]]    # Euler equation
        F[J[:x]] = -y[J[:x]]                # r‚Çú‚Çä‚ÇÅ - x‚Çú, rational expectations
        F[J[:w]] = -y[J[:w]]                # y‚Çú‚Çä‚ÇÅ - w‚Çú
    end

    # The cache is initialized as zeros so we only need to fill non-zero elements
    function Œõ(F, z, y)
        F[S[:N], J[:x]] = z[S[:N]] - exp(y[J[:c]])
        F[S[:N], J[:w]] = 1.
    end

    # The cache is initialized as zeros so we only need to fill non-zero elements
    function Œ£(F, z, y)
        F[S[:r], SH[:Œµr]] = œÉr
        F[S[:y], SH[:Œµy]] = œÉy
    end

    Œì‚ÇÖ = zeros(T, Ny, Nz)
    Œì‚ÇÖ[J[:c], S[:r]] = 1.
    Œì‚ÇÖ[J[:x], S[:r]] = 1.
    Œì‚ÇÖ[J[:w], S[:y]] = 1.

    Œì‚ÇÜ = zeros(T, Ny, Ny)
    Œì‚ÇÜ[J[:c], J[:c]] = -Œ≥

    if sparse_arrays
        Œì‚ÇÖ = sparse(Œì‚ÇÖ)
        Œì‚ÇÜ = sparse(Œì‚ÇÜ)
    end

    z = zguess
    y = yguess
    if isnothing(Œ®)
        Œ® = Psiguess
    end

    if sparse_arrays
        return RiskAdjustedLinearization(Œº, Œõ, Œ£, Œæ, Œì‚ÇÖ, Œì‚ÇÜ, crw_ccgf, z, y, Œ®, NŒµ; sparse_jacobian = sparse_jacobian,
                                         Œõ_cache_init = dims -> spzeros(dims...),
                                         Œ£_cache_init = dims -> spzeros(dims...),
                                         jump_dependent_shock_matrices = true)
    else
        return RiskAdjustedLinearization(Œº, Œõ, Œ£, Œæ, Œì‚ÇÖ, Œì‚ÇÜ, crw_ccgf, z, y, Œ®, NŒµ; sparse_jacobian = sparse_jacobian,
                                         jump_dependent_shock_matrices = true)
    end
end

crw_c‚Çú(m, z‚Çú) = exp(m.y[1] + (m.Œ® * (z‚Çú - m.z))[1])

# Evaluates m_{t + 1} + r_{t + 1}
function crw_logSDFxR(m, z‚Çú, Œµ‚Çú‚Çä‚ÇÅ, C‚Çú)
    z‚Çú‚Çä‚ÇÅ, y‚Çú‚Çä‚ÇÅ = simulate(m, Œµ‚Çú‚Çä‚ÇÅ, z‚Çú)

    return log(m_crw.Œ≤) - m_crw.Œ≥ * (y‚Çú‚Çä‚ÇÅ[1] - log(C‚Çú)) + z‚Çú‚Çä‚ÇÅ[2]
end

# Calculate ùîº‚Çú[exp(m‚Çú‚Çä‚ÇÅ + r‚Çú‚Çä‚ÇÅ)] via quadrature
std_norm_mean = zeros(2)
std_norm_sig  = ones(2)
crw_ùîº_quadrature(f::Function) = gausshermite_expectation(f, std_norm_mean, std_norm_sig, 10)

# Calculate implied state variable(s)
function crw_endo_states(m, z‚Çú, z‚Çú‚Çã‚ÇÅ, c_impl)
    # r‚Çú, y‚Çú are exogenous while N‚Çú = exp(r‚Çú) * A‚Çú‚Çã‚ÇÅ + Y‚Çú is entirely pre-determined.
    # Thus, our implied state variable will be foreign asset A‚Çú = N‚Çú - C‚Çú.

    # z‚Çú‚Çã‚ÇÅ may be the previous period's implied state, so we start from there
    # to calculate A‚Çú‚Çã‚ÇÅ.
    y‚Çú‚Çã‚ÇÅ = m.y + m.Œ® * (z‚Çú‚Çã‚ÇÅ - m.z) # Calculate implied jump variables last period
    C‚Çú‚Çã‚ÇÅ = exp(y‚Çú‚Çã‚ÇÅ[1])             # to get the implied consumption last period.
    A‚Çú‚Çã‚ÇÅ = z‚Çú‚Çã‚ÇÅ[1] - C‚Çú‚Çã‚ÇÅ           # Given that consumption, we compute implied foreign assets yesterday.
    N‚Çú   = exp(z‚Çú[2]) * A‚Çú‚Çã‚ÇÅ + exp(z‚Çú[3]) # Now we can get implied resources available today.

    return vcat(z‚Çú, N‚Çú - exp(c_impl)) # This gives us implied foreign assets today, along with other state variables
end

function crw_ccgf(F, Œ±, z)
    # F .= .5 * diag(Œ± * Œ±') # slower but this is the underlying math
    sum!(F, Œ±.^2) # faster implementation
    F .*= .5
end
