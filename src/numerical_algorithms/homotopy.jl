"""
```
homotopy!(m, x‚Çô‚Çã‚ÇÅ; step = .1, pnorm = Inf, verbose = :none, kwargs...)
```

solves the system of equations characterizing a risk-adjusted linearization by a homotopy method with
embedding parameter ``q``, which steps from 0 to 1, with ``q = 1`` obtaining the true solution.

Currently, the only algorithm for choosing ``q`` is a simple uniform step search. Given a step size
``\\Delta``, we solve the homotopy starting from ``q = \\Delta`` and increase ``q`` by ``\\Delta``
until ``q`` reaches 1 or passes 1 (in which case, we force ``q = 1``).

### Types:
- `S1 <: Number`

### Inputs
- `m::RiskAdjustedLinearization`: object holding functions needed to calculate
    the risk-adjusted linearization
- `x‚Çô‚Çã‚ÇÅ::AbstractVector{S1}`: initial guess for ``(z, y, \\Psi)``

### Keywords
- `step::Float64`: size of the uniform step from `step` to 1.
- `pnorm::Float64`: norm under which to evaluate the errors after homotopy succeeds.
- `verbose::Symbol`: verbosity of information printed out during solution.
    a) `:low` -> statement when homotopy continuation succeeds
    b) `:high` -> statement when homotopy continuation succeeds and for each successful iteration
"""
function homotopy!(m::RiskAdjustedLinearization, x‚Çô‚Çã‚ÇÅ::AbstractVector{S1};
                   step::Float64 = .1, pnorm::Float64 = Inf,
                   verbose::Symbol = :none, autodiff::Symbol = :central,
                   kwargs...) where {S1 <: Number}
    # Set up
    nl = nonlinear_system(m)
    li = linearized_system(m)

    qguesses = step:step:1.
    if qguesses[end] != 1.
        qguesses = vcat(qguesses, 1.)
    end
    for (i, q) in enumerate(qguesses)
        solve_steadystate!(m, getvecvalues(m), q; verbose = verbose, autodiff = autodiff, kwargs...)

        if verbose == :high
            println("Success at iteration $(i) of $(length(qguesses))")
        end
    end

    if verbose in [:low, :high]
        errvec = vcat(m[:Œº_sss] - m.z, m[:Œæ_sss] + m[:Œì‚ÇÖ] * m.z + m[:Œì‚ÇÜ] * m.y + m[:ùí±_sss],
                      vec(m[:Œì‚ÇÉ] + m[:Œì‚ÇÑ] * m.Œ® + (m[:Œì‚ÇÖ] + m[:Œì‚ÇÜ] * m.Œ®) * (m[:Œì‚ÇÅ] + m[:Œì‚ÇÇ] * m.Œ®) + m[:JV]))

        println("Homotopy succeeded!")
        println("Error under norm = $(pnorm) is $(norm(errvec, pnorm)).")
    end

    update!(m)

    return m
end

function solve_steadystate!(m::RiskAdjustedLinearization, x0::AbstractVector{S1}, q::Float64;
                            autodiff::Symbol = :central, verbose::Symbol = :none, kwargs...) where {S1 <: Real}

    # Set up system of equations
    N_zy = m.Nz + m.Ny
    nl = nonlinear_system(m)
    li = linearized_system(m)
    _my_eqn = if Œõ_eltype(nl) <: RALF1 && Œ£_eltype(nl) <: RALF1 # only difference in this block and the next block
        function _my_stochastic_equations1(F, x)                # is the number of args to retrieve ùí±_sss and JV
            # Unpack
            z = @view x[1:m.Nz]
            y = @view x[(m.Nz + 1):N_zy]
            Œ® = @view x[(N_zy + 1):end]
            Œ® = reshape(Œ®, m.Ny, m.Nz)

            # Given coefficients, update the model
            update!(nl, z, y, Œ®)
            update!(li, z, y, Œ®)

            # Calculate residuals
            Œº_sss              = get_tmp(nl.Œº.cache, z, y, (1, 1)) # select the first DiffCache b/c that one corresponds to autodiffing both z and y
            Œæ_sss              = get_tmp(nl.Œæ.cache, z, y, (1, 1))
            ùí±_sss              = get_tmp(nl.ùí±.cache, z, Œ®, (1, 1))
            Œì‚ÇÅ                 = get_tmp(li.Œºz.cache, z, y, (1, 1))
            Œì‚ÇÇ                 = get_tmp(li.Œºy.cache, z, y, (1, 1))
            Œì‚ÇÉ                 = get_tmp(li.Œæz.cache, z, y, (1, 1))
            Œì‚ÇÑ                 = get_tmp(li.Œæy.cache, z, y, (1, 1))
            JV                 = get_tmp(li.Jùí±.cache, z, Œ®, (1, 1))
            F[1:m.Nz]          = Œº_sss - z
            F[(m.Nz + 1):N_zy] = Œæ_sss + li[:Œì‚ÇÖ] * z + li[:Œì‚ÇÜ] * y + q * ùí±_sss
            F[(N_zy + 1):end]  = Œì‚ÇÉ + Œì‚ÇÑ * Œ® + (li[:Œì‚ÇÖ] + li[:Œì‚ÇÜ] * Œ®) * (Œì‚ÇÅ + Œì‚ÇÇ * Œ®) + q * JV
        end
    else
        function _my_stochastic_equations2(F, x)
            # Unpack
            z = @view x[1:m.Nz]
            y = @view x[(m.Nz + 1):N_zy]
            Œ® = @view x[(N_zy + 1):end]
            Œ® = reshape(Œ®, m.Ny, m.Nz)

            # Given coefficients, update the model
            update!(nl, z, y, Œ®)
            update!(li, z, y, Œ®)

            # Calculate residuals
            Œº_sss              = get_tmp(nl.Œº.cache, z, y, (1, 1)) # select the first DiffCache b/c that one corresponds to autodiffing both z and y
            Œæ_sss              = get_tmp(nl.Œæ.cache, z, y, (1, 1))
            ùí±_sss              = get_tmp(nl.ùí±.cache, z, y, Œ®, z, (1, 1))
            Œì‚ÇÅ                 = get_tmp(li.Œºz.cache, z, y, (1, 1))
            Œì‚ÇÇ                 = get_tmp(li.Œºy.cache, z, y, (1, 1))
            Œì‚ÇÉ                 = get_tmp(li.Œæz.cache, z, y, (1, 1))
            Œì‚ÇÑ                 = get_tmp(li.Œæy.cache, z, y, (1, 1))
            JV                 = get_tmp(li.Jùí±.cache, z, y, Œ®, (1, 1))
            F[1:m.Nz]          = Œº_sss - z
            F[(m.Nz + 1):N_zy] = Œæ_sss + li[:Œì‚ÇÖ] * z + li[:Œì‚ÇÜ] * y + q * ùí±_sss
            F[(N_zy + 1):end]  = Œì‚ÇÉ + Œì‚ÇÑ * Œ® + (li[:Œì‚ÇÖ] + li[:Œì‚ÇÜ] * Œ®) * (Œì‚ÇÅ + Œì‚ÇÇ * Œ®) + q * JV
        end
    end

    # Need to declare chunk size to ensure no problems with reinterpreting the cache
    out = nlsolve(OnceDifferentiable(_my_eqn, x0, copy(x0), autodiff,
                                     ForwardDiff.Chunk(ForwardDiff.pickchunksize(min(m.Nz, m.Ny)))), x0; kwargs...)

    if out.f_converged
        m.z .= out.zero[1:m.Nz]
        m.y .= out.zero[(m.Nz + 1):N_zy]
        m.Œ® .= reshape(out.zero[(N_zy + 1):end], m.Ny, m.Nz)
    else
        if verbose == :high
            println(out)
        end
        throw(RALHomotopyError("A solution for (z, y, Œ®) to the state transition, expectational, " *
                               "and linearization equations could not be found when the embedding " *
                               "parameter q equals $(q)"))
    end
end

mutable struct RALHomotopyError <: Exception
    msg::String
end
Base.showerror(io::IO, ex::RALHomotopyError) = print(io, ex.msg)
